// file: services/api_service.dart
import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:frontend/models/transaction_model.dart';
import 'package:frontend/models/user_profile_model.dart';
import '../models/login/storage_service.dart'; // <-- import storage service
import 'dart:io'; // <-- import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ File
import 'package:path/path.dart' as p; // <-- import ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå

class ApiService {
  ApiService._internal() {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Interceptor ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    _addAuthInterceptor();
  }
  static final ApiService _instance = ApiService._internal();
  factory ApiService() => _instance;

  final Dio _dio = Dio(
    BaseOptions(
      baseUrl: 'http://twinder.xyz:7000',
      connectTimeout: const Duration(seconds: 5),
      receiveTimeout: const Duration(seconds: 30),
    ),
  );

  // === ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Token ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ===
  void _addAuthInterceptor() {
    _dio.interceptors.add(
      InterceptorsWrapper(
        onRequest: (options, handler) async {
          final storage = UserStorageService();
          final token = await storage.readUserToken();
          if (token != null && token.isNotEmpty) {
            options.headers['Authorization'] = 'Bearer $token';
            print('Token added to header!');
          }
          return handler.next(options);
        },
        onError: (DioException e, handler) async {
          if (e.response?.statusCode == 401) {
            print('Token expired or invalid.');
          }
          return handler.next(e);
        },
      ),
    );
  }
  // ===================================

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•
  Future<ProfileResponse> getUserProfile(String email) async {
    try {
      final response = await _dio.get('/users/profile/$email');
      return ProfileResponse.fromJson(response.data);
    } on DioException catch (e) {
      throw Exception('Failed to load user profile: ${e.message}');
    } catch (e) {
      throw Exception('An unknown error occurred: $e');
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  Future<UserProfile> updateUserProfile({
    required Map<String, dynamic> userData,
    File? imageFile,
  }) async {
    try {
      // ‚ú® ‡πÅ‡∏¢‡∏Å categoryNames ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å
      final categoryNames = userData['categoryNames'] as List<String>?;
      final dataWithoutCategories = Map<String, dynamic>.from(userData)..remove('categoryNames');
      
      final formData = FormData.fromMap(dataWithoutCategories);
      
      // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° categoryNames ‡πÅ‡∏ö‡∏ö array ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (categoryNames != null && categoryNames.isNotEmpty) {
        for (var category in categoryNames) {
          formData.fields.add(MapEntry('categoryNames', category));
        }
      }
      
      if (imageFile != null) {
        String fileName = p.basename(imageFile.path);
        formData.files.add(
          MapEntry(
            'ProfilePicture',
            await MultipartFile.fromFile(imageFile.path, filename: fileName),
          ),
        );
      }
      
      print('FormData fields: ${formData.fields}'); // ‚ú® Debug log
      
      final response = await _dio.put('/users', data: formData);
      return UserProfile.fromJson(response.data);
    } on DioException catch (e) {
      print('DioException updating profile: ${e.response?.data}'); // ‚ú® Debug log
      throw Exception('Failed to update profile: ${e.message}');
    } catch (e) {
      print('Unknown error updating profile: $e'); // ‚ú® Debug log
      throw Exception('An unknown error occurred: $e');
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Category ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡πÉ‡∏à
  Future<void> updateUserCategories(List<String> categoryNames) async {
    try {
      final body = {'categoryNames': categoryNames};
      print('Updating categories with: $body'); // ‚ú® Debug log
      final response = await _dio.put('/users', data: body);
      print('Categories update response: ${response.statusCode}'); // ‚ú® Debug log
    } on DioException catch (e) {
      print('DioException updating categories: ${e.response?.data}'); // ‚ú® Debug log
      throw Exception(
        'Failed to update categories: ${e.response?.data['message'] ?? e.message}',
      );
    } catch (e) {
      print('Unknown error updating categories: $e'); // ‚ú® Debug log
      throw Exception('An unknown error occurred: $e');
    }
  }

  Future<List<String>> getForYouItems(String email) async {
    try {
      final response = await _dio.get(
        '/items/available_items/',
        queryParameters: {'email': email},
      );
      final List<dynamic> jsonList = response.data['items'];
      List<String> items = jsonList.map((item) => jsonEncode(item)).toList();
      return items;
    } on DioException catch (e) {
      throw Exception('Failed to fetch "For You" items: ${e.message}');
    } catch (e) {
      throw Exception('An unknown error occurred: $e');
    }
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<List<Transaction>> getTransactions() async {
    try {
      final response = await _dio.get('/transactions');

      // 1. ‡∏î‡∏∂‡∏á List ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô key 'transactions'
      final List<dynamic> transactionListJson = response.data['transactions'];

      // 2. ‡πÉ‡∏ä‡πâ .map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ object ‡πÉ‡∏ô list ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Transaction object
      final List<Transaction> transactions = transactionListJson
          .map((json) => Transaction.fromJson(json))
          .toList();

      return transactions;
    } on DioException catch (e) {
      throw Exception('Failed to fetch transactions: ${e.message}');
    } catch (e) {
      throw Exception('An unknown error occurred: $e');
    }
  }

   Future<void> rateTransaction({
    required int transactionId,
    required double score, // ‡πÉ‡∏ä‡πâ double ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
  }) async {
    try {
      // Debug logs
      print('rateTransaction called with:');
      print('- transactionId: $transactionId (${transactionId.runtimeType})');
      print('- score: $score (${score.runtimeType})');
      
      // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á body ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà Backend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      final body = {
        'transactionId': transactionId,
        'score': score,
      };
      print('Request body: $body');

      // 2. ‡∏¢‡∏¥‡∏á PUT request ‡πÑ‡∏õ‡∏ó‡∏µ‡πà /transactions/rate ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏™‡πà‡∏á body
      // dio ‡∏à‡∏∞‡πÉ‡∏™‡πà Header 'Content-Type: application/json' ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
      final response = await _dio.post(
        '/transactions/rate',
        data: body,
      );
      print('Response: ${response.statusCode} - ${response.data}');
    } on DioException catch (e) {
      // 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      throw Exception('Failed to submit rating: ${e.response?.data['message'] ?? e.message}');
    } catch (e) {
      throw Exception('An unknown error occurred: $e');
    }
  }

  Future<List<String>> getRequestItems(String email) async {
    try {
      final response = await _dio.get('/...');
      final List<dynamic> jsonList = response.data['items'];
      List<String> items = jsonList.map((item) => item.toString()).toList();
      return items;
    } on DioException catch (e) {
      throw Exception('Failed to fetch "Request" items: ${e.message}');
    } catch (e) {
      throw Exception('An unknown error occurred: $e');
    }
  }

  Future<void> createOffer({
    required String targetItemId,
    required String offeredItemId,
    required String userEmail,
  }) async {
    final Map<String, dynamic> requestBody = {
      'targetItemId': targetItemId,
      'offeredItemId': offeredItemId,
      'userEmail': userEmail,
    };

    try {
      final response = await _dio.post(
        '/transactions/offer',
        data: requestBody,
      );

      if (response.statusCode != 201 && response.statusCode != 200) {
        throw Exception(
          'Failed to create offer. Server responded with status: ${response.statusCode}',
        );
      }
    } catch (e) {
      throw Exception('Failed to send offer request: $e');
    }
  }


  Future<void> createItemWithImage({
    required String name,
    required String priceRange,
    required String description,
    required List<String> categoryNames,
    File? ItemPicture,
  }) async {
    try {
      // ‚úÖ Debug log
      print("üì§ [CREATE ITEM BODY]");
      print("name: $name");
      print("priceRange: $priceRange");
      print("description: $description");
      print("categoryNames: $categoryNames");
      print("ItemPicture: ${ItemPicture?.path}");

      final formData = FormData.fromMap({
        "name": name,
        "priceRange": priceRange,
        "description": description,
        "categoryNames": categoryNames,
        if (ItemPicture != null)
          "ItemPicture": await MultipartFile.fromFile(
            ItemPicture.path,
            filename: ItemPicture.path.split('/').last,
          ),
      });

      final response = await _dio.post("/items", data: formData);

      print("üì• [RESPONSE STATUS] ${response.statusCode}");
      print("üì• [RESPONSE DATA] ${response.data}");

      if (response.statusCode != 200 && response.statusCode != 201) {
        throw Exception("Create item failed: ${response.statusCode}");
      }

      print("‚úÖ Item created successfully: ${response.data}");
    } on DioException catch (e) {
      print("‚ùå DioException: ${e.response?.data ?? e.message}");
      rethrow;
    } catch (e) {
      print("‚ùå Unexpected Error: $e");
      rethrow;
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á item ‡πÉ‡∏´‡∏°‡πà
  Future<void> createItem({
    required String name,
    required String priceRange,
    required String description,
    required List<String> categoryNames,
    
  }) async {
    try {
      final body = {
        "name": name,
        "priceRange": priceRange,
        "description": description,
        "categoryNames": categoryNames,
      };

      final response = await _dio.post('/items', data: body);

      if (response.statusCode != 201 && response.statusCode != 200) {
        throw Exception(
          'Failed to create item. Server responded with status: ${response.statusCode}',
        );
      }

      print('‚úÖ Item created successfully: ${response.data}');
    } on DioException catch (e) {
      print('‚ùå Failed to create item: ${e.response?.data ?? e.message}');
      throw Exception('Failed to create item: ${e.message}');
    } catch (e) {
      throw Exception('An unknown error occurred: $e');
    }
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° keyword ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  Future<List<dynamic>> searchItems({
    required String keyword,
    required List<String> categories,
  }) async {
    try {
      final body = {
        "keyword": keyword,
        "categories": categories,
      };

      print('üì§ [SEARCH REQUEST BODY] $body'); // ‚úÖ ‡∏î‡∏π body ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏à‡∏£‡∏¥‡∏á ‡πÜ
      print('üåç Using base URL: ${_dio.options.baseUrl}');

      final response = await _dio.post('/items/search', data: body);

      print('üìã [HEADERS] ${_dio.options.headers}');
      print('üì• [SEARCH RESPONSE STATUS] ${response.statusCode}');
      print('üì• [SEARCH RESPONSE DATA] ${response.data}'); // ‚úÖ ‡∏î‡∏π response ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô

      if (response.statusCode == 200) {
        // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ backend ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á item
        return response.data['items'];
      } else {
        throw Exception(
          'Failed to search items. Status code: ${response.statusCode}',
        );
      }
    } on DioException catch (e) {
      print('‚ùå [DIO ERROR] ${e.response?.data ?? e.message}');
      throw Exception('Search request failed: ${e.response?.data ?? e.message}');
    } catch (e) {
      print('‚ö†Ô∏è [UNEXPECTED ERROR] $e');
      throw Exception('Unexpected error during search: $e');
    }
  }
}
